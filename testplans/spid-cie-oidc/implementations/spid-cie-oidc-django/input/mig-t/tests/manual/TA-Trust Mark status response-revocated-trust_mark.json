{
  "test suite": {
    "name": "TA",
    "description": "TA",
    "filter messages": true
  },
  "tests": [
    {
      "test": {
        "name": "Does the TA invalidate revocated trust marks",
        "description": "In order to check if a TA correctly invalidate a Trust Mark, a Trust Mark revocation request on a Trust Mark has to be made and then the trust mark status endpoint must be fetched. If the response says that the trust mark is invalid, than it is correctly invalidated, otherwise the TA is not compliant with the specification",
        "type": "active",
        "sessions": [
          "s1-logout"
        ],
        "operations": [
          {
            "session": "s1-logout",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1-logout",
            "then": "forward",
            "message type": "Entity Configuration response RP",
            "decode operations": [
              {
                "from": "body",
                "type": "jwt",
                "decode param": "[^\\n\\r]*",
                "edits": [
                  {
                    "jwt from": "payload",
                    "jwt save": "$.trust_marks[0].id",
                    "as": "saved_id"
                  }
                ]
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1-logout",
            "then": "forward",
            "message type": "Authentication request",
            "session operations": [
              {
                "session": "s1-logout",
                "insert": "open | X_url_TA/onboarding/tools/validating-trustmark",
                "at": "ML"
              },
              {
                "session": "s1-logout",
                "insert": "wait | 3000",
                "at": "ML"
              },
              {
                "session": "s1-logout",
                "insert": "open | X_url_revoke_TA",
                "at": "ML"
              },
              {
                "session": "s1-logout",
                "insert": "wait | 3000",
                "at": "ML"
              },
              {
                "session": "s1-logout",
                "insert": "click | xpath=/html/body/div[2]/div/div/div/div/div/div/div/div/div/form/input[2]",
                "at": "ML"
              },
              {
                "session": "s1-logout",
                "insert": "wait | 4000",
                "at": "ML"
              },
              {
                "session": "s1-logout",
                "insert": "open | X_url_TA/trust_mark_status",
                "at": "ML"
              },
              {
                "session": "s1-logout",
                "insert": "wait | 4000",
                "at": "ML"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1-logout",
            "then": "forward",
            "message type": "Validating request",
            "message operations": [
              {
                "from": "url",
                "save": "csrfmiddlewaretoken",
                "as": "save_csrfmiddlewaretoken"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1-logout",
            "then": "forward",
            "message type": "Trust Mark revoke request TA",
            "message operations": [
              {
                "from": "head",
                "edit regex": "GET",
                "in": "POST"
              },
              {
                "from": "head",
                "add": "Content-Type",
                "in": "application/x-www-form-urlencoded"
              },
              {
                "from": "body",
                "add": "id=",
                "in": "id="
              },
              {
                "from": "body",
                "add": "id=",
                "use": "saved_id"
              },
              {
                "from": "body",
                "add": "&csrfmiddlewaretoken=",
                "in": "&csrfmiddlewaretoken="
              },
              {
                "from": "body",
                "add": "&csrfmiddlewaretoken=",
                "use": "save_csrfmiddlewaretoken"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1-logout",
            "then": "forward",
            "message type": "Trust Mark status request TA",
            "message operations": [
              {
                "from": "head",
                "edit regex": "GET",
                "in": "POST"
              },
              {
                "from": "head",
                "add": "Content-Type",
                "in": "application/x-www-form-urlencoded"
              },
              {
                "from": "body",
                "add": "id=",
                "in": "id="
              },
              {
                "from": "body",
                "add": "id=",
                "use": "saved_id"
              },
              {
                "from": "body",
                "add": "&sub=",
                "in": "&sub="
              },
              {
                "from": "body",
                "add": "&sub=",
                "in": "relying-party.org:8001"
              },
              {
                "from": "body",
                "add": "&csrfmiddlewaretoken=",
                "in": "&csrfmiddlewaretoken="
              },
              {
                "from": "body",
                "add": "&csrfmiddlewaretoken=",
                "use": "save_csrfmiddlewaretoken"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1-logout",
            "then": "forward",
            "message type": "Trust Mark status response TA",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s200",
                "is present": "true"
              },
              {
                "in": "body",
                "check regex": "\"active\"\": false",
                "is present": "true"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    }
  ]
}