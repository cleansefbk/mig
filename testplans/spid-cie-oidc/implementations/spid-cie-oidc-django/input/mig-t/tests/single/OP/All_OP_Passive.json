{
  "test suite": {
    "name": "OP",
    "description": "All the test available for this entity",
    "filter messages": true
  },
  "tests": [
    {
      "test": {
        "name": "Does the OP correctly contain the code parameter on redirect in a successful authentication",
        "description": "In order to check if the OP correctly handles a successful authentication request, a correct request is sent by a client and the behavior of the OP is analyzed. In particular, the client must be redirected to its redirect_uri and the redirect must have 'code' as query parameter",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication response",
            "checks": [
              {
                "in": "head",
                "check param": "Location",
                "contains": "code"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP contain iss parameter on redirect in a successful authentication",
        "description": "In order to check if the OP correctly handles a successful authentication request, a correct request is sent by a client and the behavior of the OP is analyzed. In particular, the client must be redirected to its redirect_uri and the redirect must have 'iss' as query parameter",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication response",
            "checks": [
              {
                "in": "head",
                "check param": "Location",
                "contains": "iss"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP contain correct state parameter on redirect in a successful authentication",
        "description": "In order to check if the OP correctly handles a successful authentication request, a correct request is sent by a client and the behavior of the OP is analyzed. In particular, the client must be redirected to its redirect_uri and the redirect must have 'state' as query parameter",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication response",
            "checks": [
              {
                "in": "head",
                "check param": "Location",
                "contains": "state"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain a correct 'alg' parameter in the Header",
        "description": "In this test, the Access Token is taken from the Token Response, the header is base64url decoded and the presence of the 'alg' parameter in the Header is checked. The value must be a supported asymmetric algorithm between ['RS256', 'RS512']",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "header",
                    "check": "$.alg",
                    "is in": [
                      "RS256",
                      "RS512"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain a wrong 'alg' parameter in the Header",
        "description": "In this test, the Access Token is taken from the Token Response, the header is base64url decoded and the presence of the 'alg' parameter in the Header is checked. If its value is set to none, contains values among ['none', 'HS256', 'HS384', 'HS512'], is absent or contains a symmetric algorithm, than the Access Token is not compliant.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "header",
                    "check": "$.alg",
                    "is not in": [
                      "none",
                      "HS256",
                      "HS384",
                      "HS512"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT ID Token contain a wrong 'alg' parameter in the Header",
        "description": "In this test, the ID Token is taken from the Token Response, the header is base64url decoded and the presence of the 'alg' parameter in the Header is checked. If its value is set to none, contains values among ['none', 'HS256', 'HS384', 'HS512'], is absent or contains a symmetric algorithm, than the ID Token is not compliant.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"id_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "header",
                    "check": "$.alg",
                    "is not in": [
                      "none",
                      "HS256",
                      "HS384",
                      "HS512"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the jwks claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the presence of the 'jwks' parameter in the 'openid_provider' subclaim (metadata type) is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.jwks",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the acr_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the presence of the 'acr_values_supported' in the 'openid_provider' subclaim (metadata type) parameter is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.acr_values_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the authorization_endpoint parameter",
        "description": "In this test the OP metadata are taken and the presence of the 'authorization_endpoint' parameter in the 'openid_provider' subclaim (metadata type) is checked. It must be present",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.authorization_endpoint",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the authorization_response_iss_parameter_supported claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the authorization_response_iss_parameter_supported claim in the 'openid_provider' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.authorization_response_iss_parameter_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the claims_parameter_supported claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the claims_parameter_supported claim in the 'openid_provider' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.claims_parameter_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the claims_supported claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the claims_supported claim in the 'openid_provider' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.claims_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the client_registration_types_supported claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the client_registration_types_supported claim in the 'openid_provider' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.client_registration_types_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the code_challenge_methods_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the presence of the 'code_challenge_methods_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.code_challenge_methods_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the contacts claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the contacts claim in the 'federation_entity' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.federation_entity.contacts",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the federation_resolve_endpoint claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the federation_resolve_endpoint claim in the 'federation_entity' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.federation_entity.federation_resolve_endpoint",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the grant_types_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the presence of the 'grant_types_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.grant_types_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the homepage_uri claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the homepage_uri claim in the 'federation_entity' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.federation_entity.homepage_uri",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the id_token_encryption_alg_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the presence of the 'id_token_encryption_alg_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.id_token_encryption_alg_values_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the id_token_encryption_enc_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the presence of the 'id_token_encryption_enc_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.id_token_encryption_enc_values_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the id_token_signing_alg_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the presence of the 'id_token_signing_alg_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.id_token_signing_alg_values_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the introspection_endpoint parameter",
        "description": "In this test the OP metadata are taken and the presence of the 'introspection_endpoint' parameter in the 'openid_provider' subclaim (metadata type) is checked. It must be present",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.introspection_endpoint",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the issuer parameter",
        "description": "In this test the OP metadata are taken and the presence of the 'issuer' parameter in the 'openid_provider' subclaim (metadata type) is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.issuer",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the logo_uri claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the logo_uri claim in the 'federation_entity' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.federation_entity.logo_uri",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the organization_name claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the organization_name claim in the 'federation_entity' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.federation_entity.organization_name",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the policy_uri claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the policy_uri claim in the 'federation_entity' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.federation_entity.policy_uri",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the request_authentication_methods_supported claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the request_authentication_methods_supported claim in the 'openid_provider' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.request_authentication_methods_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the request_authentication_signing_alg_values_supported claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the request_authentication_signing_alg_values_supported claim in the 'openid_provider' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.request_authentication_signing_alg_values_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the request_object_signing_alg_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the presence of the 'request_object_signing_alg_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.request_object_signing_alg_values_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the request_parameter_supported claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the request_parameter_supported claim in the 'openid_provider' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.request_parameter_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the response_modes_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the presence of the 'response_modes_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.response_modes_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the response_types_supported claim",
        "description": "In this test the OP metadata are taken and the presence of the 'response_types_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.response_types_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the revocation_endpoint parameter",
        "description": "In this test the OP metadata are taken and the presence of the 'revocation_endpoint' parameter in the 'openid_provider' subclaim (metadata type) is checked. It must be present",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.revocation_endpoint",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the revocation_endpoint_auth_methods_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the presence of the 'revocation_endpoint_auth_methods_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.revocation_endpoint_auth_methods_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the scopes_supported claim",
        "description": "In this test the OP metadata are taken and the presence of the 'scopes_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.scopes_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the subject_types_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the presence of the 'subject_types_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.subject_types_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the token_endpoint parameter",
        "description": "In this test the OP metadata are taken and the presence of the 'token_endpoint' parameter in the 'openid_provider' subclaim (metadata type) is checked. It must be present",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.token_endpoint",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the token_endpoint_auth_methods_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the presence of the 'token_endpoint_auth_methods_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.token_endpoint_auth_methods_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the token_endpoint_auth_signing_alg_values_supported claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the token_endpoint_auth_signing_alg_values_supported claim in the 'op' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.token_endpoint_auth_signing_alg_values_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the userinfo_encryption_alg_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the presence of the 'userinfo_encryption_alg_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.userinfo_encryption_alg_values_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the userinfo_encryption_enc_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the presence of the 'userinfo_encryption_enc_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.userinfo_encryption_enc_values_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the userinfo_endpoint parameter",
        "description": "In this test the OP metadata are taken and the presence of the 'userinfo_endpoint' parameter in the 'openid_provider' subclaim (metadata type) is checked. It must be present",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.userinfo_endpoint",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the userinfo_signing_alg_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the presence of the 'userinfo_signing_alg_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.userinfo_signing_alg_values_supported",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the jwks or signed_jwks_uri claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the presence of the 'jwks' or the 'signed_jwks_uri' parameter in the 'openid_provider' subclaim (metadata type) is checked. There must be at least one of the two",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.signed_jwks_uri",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the UserInfo Response's JWE contain a correct cty parameter in the JOSE Header",
        "description": "The JWE Token contained in the UserInfo response is taken and analyzed. If it contains the 'cty' parameter set to 'JWT' in the JOSE header, then it is compliant with the specification",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "UserInfo response",
            "decode operations": [
              {
                "jwe decrypt": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC5d8kD7BOVMIDg\nV2ygTSpl+YoiB52Zquu1aBBsSUptaD1ENHtnwlUFpEsWrDJ/IbUkkWbrgbnVwEnA\nsgXBagXufGwf1VgubmhyMCexHhGGV9UTTL/rTCN/yyQmAFGmJdA+XAf2MMZqpUT8\n8QFM5sM7nDdei6sPUXfrT6/lwsMtEd0UkiK10RW2oBOpjkOCVENoqIGGKztrn/Vu\nTzf08MtpCGO7hcmTi28PLn4tWQzLmw/bNTr7W0l0D5WZoFktfL2fT3rsUYhaYzOl\np+sEw64cVxQ4fnqj5yUNqH8IhMfV2rYPrgrQxiESkAI7anwAfgrxDpi4nV2eRUMP\nBmnYLzixAgMBAAECggEBAJ/3jyuQ3TsagK3++bQxmlYmK1w6kVZPM8pdnXyookdH\nV0CSu7W8ybR6BkHh+BPrMN//gXOzimOw3GwVoB04ozEVo/S5ALvbgr6qhjGgK6Fh\n9GgXFJmQLDY3MlCMid/yUXDX1A4l951YOu6nuGVpzA6IKMGlWb92lyYgryhPGiSu\nAVf5xdzbeUes1GKY2UPE9Rg2Qld782t6oJQ613vM6HPqfHC7N6yZ+7TFUiVc5wiK\njn3jNVSINCN59m7m2DsfPLHJB7g53104kw5cquSMA8gR5oiHt36bvnOHtbYgZmzn\n9iKgwml/EnaZ1NoE4/WJWbUTapodzQf65LASli897iECgYEA5PA7lJEDd3vrw5hl\nolFzvjvRriOu1SMHXx9Y52AgpOeQ6MnE1pO8qwn33lwYTSPGYinaq4jS3FKF/U5v\nOZltJAGBMa4ByEvAROJVCh958rKVRWKIqVXLOi8Gk11kHbVKw6oDXAd8Qt/y/ff8\nk/K6jW2EbWm1K6kfTvTMzoHkqrUCgYEAz2QeMH4WtrdiWUET7JgZNX0TbcaVBgd2\nGpo8JHnfnGOUsvO/euKGgqpCcxiWVXSlqffQyTgVzl4iMROP8bEaQwvueHurtziM\nDSy9Suumyktu3PbGgjqu/izRim8Xlg7sz8Hs2quJPII/fQ8BCoaWpg30osFZqCBa\nrQM7CWhxR40CgYA3CVWZap8lu0G7XMiaE/C6O9E1htiB3pDoGjYaMW7Hle+tNsw+\nNXf2uke/Se6BpOcNNDigYh0m4CPb+F4ev7aQIFh5o/ZDu4o2RR7idxyu7qWZ740h\nAEIB88ol5R6rUajujtGN7zK9NO9KhLJQstqMI1bhorbuDxM6vPj7cBiTvQKBgQDJ\nfuJ+BuOWntHlGf97rcNAXsdTrs73TqSG8Ddi0S5ayb2dqIjvoctChJ2PKeJWIMEc\nRHQMLHuzR2489F60WnfDkIIfeTi7CSu5WTCI7C/e+C88bF8uBEolFfJ4Z7soxlN6\n/1Val7L8oSeCH+PJED6qE4EN6IFtghHXav4fA+SbuQKBgQCNy7q3MoBOxDlKOpSN\nChoYUfW0JvwJbyyaVYOVq0efGVobosAblE/IuwaoIuVgh8c4T3qZtwFcSpvfR5Qy\nSOWFs2QXN/P4ZvmiVpXK/9Tcnth2BThpb9apQCT2a/CYtrRiGNAVWKiK0U9QlN/w\n9fVBO/ZgdaXE4xqYOSceH14yrQ==\n-----END PRIVATE KEY-----\n",
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "header",
                    "check": "$.cty",
                    "is": "JWT"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the entity return a correct Content-Type in the EC response",
        "description": "In this test a correct request to the entity's /.well-known/openid-federation endpoint is made and the response is analyzed. It must have a Content-Type parameter set to application/entity-statement+jwt",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "checks": [
              {
                "in": "head",
                "url decode": false,
                "is": "application/entity-statement+jwt",
                "check param": "Content-Type"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the Content-Type of the UserInfo response set to 'application/jwt'",
        "description": "The Content-Type of the UserInfo response must be set to 'application/jwt' ",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "UserInfo response",
            "checks": [
              {
                "in": "head",
                "url decode": false,
                "is": "application/jwt",
                "check param": "Content-Type"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct acr_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'acr_values_supported' in the 'openid_provider' subclaim (metadata type) parameter is checked to be [https://www.spid.gov.it/SpidL1, https://www.spid.gov.it/SpidL2, https://www.spid.gov.it/SpidL3]",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.acr_values_supported[0]",
                    "is in": [
                      "https://www.spid.gov.it/SpidL1",
                      "https://www.spid.gov.it/SpidL2",
                      "https://www.spid.gov.it/SpidL3"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the correct value of client_registration_types_supported claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the client_registration_types_supported claim in the 'openid_provider' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.client_registration_types_supported[0]",
                    "is in": [
                      "automatic"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct code_challenge_methods_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'code_challenge_methods_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked to be 'S256'",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.code_challenge_methods_supported[0]",
                    "is in": [
                      "S256"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct grant_types_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'grant_types_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked to be [refresh_token, authorization_code]",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.grant_types_supported[0]",
                    "is in": [
                      "refresh_token",
                      "authorization_code"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct id_token_encryption_alg_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'id_token_encryption_alg_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked to be ['RSA-OAEP', 'RSA-OAEP-256']",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.id_token_encryption_alg_values_supported[0]",
                    "is in": [
                      "RSA-OAEP",
                      "RSA-OAEP-256"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct id_token_encryption_enc_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'id_token_encryption_enc_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked to be ['A128CBC-HS256', 'A256CBC-HS512']",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.id_token_encryption_enc_values_supported[0]",
                    "is in": [
                      "A128CBC-HS256",
                      "A256CBC-HS512"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct id_token_signing_alg_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'id_token_signing_alg_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked to be ['RS256', 'RS512']",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.id_token_signing_alg_values_supported[0]",
                    "is in": [
                      "RS256",
                      "RS512"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain a correct issuer parameter",
        "description": "In this test the OP metadata are taken and the presence of the 'issuer' parameter in the 'openid_provider' subclaim (metadata type) is checked to be the URL of the OP",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.issuer",
                    "is in": [
                      "X_url_OP"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct request_authentication_signing_alg_values_supported claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the value of the request_authentication_signing_alg_values_supported claim in the 'openid_provider' entity type is checked to ['RS256', 'RS512'].",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.request_authentication_signing_alg_values_supported[0]",
                    "is in": [
                      "RS256",
                      "RS512"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct request_object_signing_alg_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'request_object_signing_alg_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked to be ['RS256', 'RS512']",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.request_object_signing_alg_values_supported[0]",
                    "is in": [
                      "RS256",
                      "RS512"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct response_modes_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'response_modes_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked to be [form_post, query]",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.response_modes_supported[0]",
                    "is in": [
                      "form_post",
                      "query"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct response_types_supported claim",
        "description": "In this test the OP metadata are taken and the presence of the 'response_types_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked. It must be present and must be set to 'code'",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.response_types_supported[0]",
                    "is in": [
                      "code"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct revocation_endpoint_auth_methods_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'revocation_endpoint_auth_methods_supported' parameter in the 'openid_provider' subclaim (metadata type) is 'private_key_jwt'",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.revocation_endpoint_auth_methods_supported",
                    "is in": [
                      "private_key_jwt"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct scopes_supported claim",
        "description": "In this test the OP metadata are taken and the value of the 'scopes_supported' parameter in the 'openid_provider' subclaim (metadata type) is [openid, offline_access, profile, email]",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.scopes_supported[0]",
                    "is in": [
                      "openid",
                      "offline_access",
                      "profile",
                      "email"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct subject_types_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'subject_types_supported' parameter in the 'openid_provider' subclaim (metadata type) is 'pairwise'",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.subject_types_supported[0]",
                    "is in": [
                      "pairwise"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the correct value of token_endpoint_auth_methods_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the presence of the 'token_endpoint_auth_methods_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.token_endpoint_auth_methods_supported[0]",
                    "is in": [
                      "private_key_jwt"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct token_endpoint_auth_signing_alg_values_supported claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the value of the token_endpoint_auth_signing_alg_values_supported claim in the 'openid_provider' entity type is checked to be ['RS256', 'RS512'].",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.token_endpoint_auth_signing_alg_values_supported[0]",
                    "is in": [
                      "RS256",
                      "RS512"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct userinfo_encryption_alg_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'userinfo_encryption_alg_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is ['RSA-OAEP', 'RSA-OAEP-256']",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.userinfo_encryption_alg_values_supported[0]",
                    "is in": [
                      "RSA-OAEP",
                      "RSA-OAEP-256"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct userinfo_encryption_enc_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'userinfo_encryption_enc_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is ['A128CBC-HS256', 'A256CBC-HS512']",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.userinfo_encryption_enc_values_supported[0]",
                    "is in": [
                      "A128CBC-HS256",
                      "A256CBC-HS512"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct userinfo_signing_alg_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'userinfo_signing_alg_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is ['RS256', 'RS512']",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.userinfo_signing_alg_values_supported[0]",
                    "is in": [
                      "RS256",
                      "RS512"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT ID Token contain correct value of 'acr' parameter valid in the Payload",
        "description": "The ID Token present in the Token Response is taken, the payload is base64url decoded, analyzed and the presence of the 'acr' parameter in the Payload is checked. Its value is one of ['https://www.spid.gov.it/SpidL1', 'https://www.spid.gov.it/SpidL2', 'https://www.spid.gov.it/SpidL3']. It must be equal or superior to the acr send from the RP in the Authentication Request.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode regex": "(?<=\"id_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.acr",
                    "is in": [
                      "https://www.spid.gov.it/SpidL1",
                      "https://www.spid.gov.it/SpidL2",
                      "https://www.spid.gov.it/SpidL3"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP verify the HTTP method of the Revocation request",
        "description": "The revocation request must be sent via HTTP POST",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Revocation request",
            "checks": [
              {
                "in": "url",
                "is present": true,
                "check": "POST"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the successful token response contain access token",
        "description": "The Token response is analyzed and the presence of the access token is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "checks": [
              {
                "in": "body",
                "is present": true,
                "check regex": "access_token"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP issue the access tokens when requested",
        "description": "In this test an authentication request with scope 'openid' is made. Once received the code, the RP tries to exchange it in the token endpoint and the response must contain the access token.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "checks": [
              {
                "in": "body",
                "is present": true,
                "check regex": "access_token"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP issue the expires_in in a token response",
        "description": "In this test an RP makes a correct authentication request and, once received the code, the RP tries to exchange it in the token endpoint. The response is then analyzed and it must contain the expires_in parameter",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "checks": [
              {
                "in": "body",
                "is present": true,
                "check regex": "expires_in"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the successful token response contain the ID token",
        "description": "The RP receiving the Token response and that sent a correct token request must check the presence of the ID token",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "checks": [
              {
                "in": "body",
                "is present": true,
                "check regex": "id_token"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the successful token response contain the token type",
        "description": "The RP receiving the Token response and that sent a correct token request must check the presence of the token type",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "checks": [
              {
                "in": "body",
                "is present": true,
                "check regex": "token_type"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the HTTP status code of the UserInfo response is 200",
        "description": "A correct UserInfo request is made to the UserInfo endpoint (it must contain the parameter Authorization: Bearer <token> in the header) and the response analyzed. The HTTP code must be 200",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "UserInfo response",
            "checks": [
              {
                "in": "head",
                "is present": true,
                "check param": "HTTP/?\\d?\\.?\\d?\\s200"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the Content-Type in a token response set correctly?",
        "description": "This test verifies the head Content-Type set to application/json in the token response.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "checks": [
              {
                "in": "head",
                "check": "Content-Type",
                "is": "application/json"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the token_type of a token response set correctly?",
        "description": "This test verifies whether the token_type of a token response is Bearer.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "checks": [
              {
                "in": "body",
                "check": "token_type",
                "is": "Bearer"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the entity return a correct HTTP code in the EC response",
        "description": "In this test a correct request to the entity's /.well-known/openid-federation endpoint is made and the response is analyzed. It must be an HTTP 200 OK response",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s200",
                "is present": "true"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the Entity expose the /.well-known/openid-federation endpoint",
        "description": "In order to check the presence and correctness of the /.well-known/openid-federation endpoint, an HTTP GET request to the entity's endpoint is done and its entity configuration is expected as response.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s200",
                "is present": "true"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the revocation endpoint return an empty HTTP 200 OK response upon a correct revocation request",
        "description": "A correct flow is accomplished and, once received the token, a request is made to the revocation endpoint. The response is then analyzed and has to be an empty HTTP 200 OK",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Revocation response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s200",
                "is present": "true"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP handle a correct token request",
        "description": "In this test a normal flow is accomplished and is tried to obtain an Access Token. All requests are well-formed and the Responses of the OP are analyzed.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s200",
                "is present": "true"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the HTTP status of a token response correct?",
        "description": "This test verifies whether the HTTP status of a token response is 200.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s200",
                "is present": "true"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the UserInfo Response's JWE contain the alg parameter in the JOSE Header",
        "description": "The JWE Token contained in the UserInfo response's body is taken and analyzed. If it contains the 'alg' parameter in the JOSE header, then it is compliant with the specification",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "UserInfo response",
            "decode operations": [
              {
                "jwe decrypt": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC5d8kD7BOVMIDg\nV2ygTSpl+YoiB52Zquu1aBBsSUptaD1ENHtnwlUFpEsWrDJ/IbUkkWbrgbnVwEnA\nsgXBagXufGwf1VgubmhyMCexHhGGV9UTTL/rTCN/yyQmAFGmJdA+XAf2MMZqpUT8\n8QFM5sM7nDdei6sPUXfrT6/lwsMtEd0UkiK10RW2oBOpjkOCVENoqIGGKztrn/Vu\nTzf08MtpCGO7hcmTi28PLn4tWQzLmw/bNTr7W0l0D5WZoFktfL2fT3rsUYhaYzOl\np+sEw64cVxQ4fnqj5yUNqH8IhMfV2rYPrgrQxiESkAI7anwAfgrxDpi4nV2eRUMP\nBmnYLzixAgMBAAECggEBAJ/3jyuQ3TsagK3++bQxmlYmK1w6kVZPM8pdnXyookdH\nV0CSu7W8ybR6BkHh+BPrMN//gXOzimOw3GwVoB04ozEVo/S5ALvbgr6qhjGgK6Fh\n9GgXFJmQLDY3MlCMid/yUXDX1A4l951YOu6nuGVpzA6IKMGlWb92lyYgryhPGiSu\nAVf5xdzbeUes1GKY2UPE9Rg2Qld782t6oJQ613vM6HPqfHC7N6yZ+7TFUiVc5wiK\njn3jNVSINCN59m7m2DsfPLHJB7g53104kw5cquSMA8gR5oiHt36bvnOHtbYgZmzn\n9iKgwml/EnaZ1NoE4/WJWbUTapodzQf65LASli897iECgYEA5PA7lJEDd3vrw5hl\nolFzvjvRriOu1SMHXx9Y52AgpOeQ6MnE1pO8qwn33lwYTSPGYinaq4jS3FKF/U5v\nOZltJAGBMa4ByEvAROJVCh958rKVRWKIqVXLOi8Gk11kHbVKw6oDXAd8Qt/y/ff8\nk/K6jW2EbWm1K6kfTvTMzoHkqrUCgYEAz2QeMH4WtrdiWUET7JgZNX0TbcaVBgd2\nGpo8JHnfnGOUsvO/euKGgqpCcxiWVXSlqffQyTgVzl4iMROP8bEaQwvueHurtziM\nDSy9Suumyktu3PbGgjqu/izRim8Xlg7sz8Hs2quJPII/fQ8BCoaWpg30osFZqCBa\nrQM7CWhxR40CgYA3CVWZap8lu0G7XMiaE/C6O9E1htiB3pDoGjYaMW7Hle+tNsw+\nNXf2uke/Se6BpOcNNDigYh0m4CPb+F4ev7aQIFh5o/ZDu4o2RR7idxyu7qWZ740h\nAEIB88ol5R6rUajujtGN7zK9NO9KhLJQstqMI1bhorbuDxM6vPj7cBiTvQKBgQDJ\nfuJ+BuOWntHlGf97rcNAXsdTrs73TqSG8Ddi0S5ayb2dqIjvoctChJ2PKeJWIMEc\nRHQMLHuzR2489F60WnfDkIIfeTi7CSu5WTCI7C/e+C88bF8uBEolFfJ4Z7soxlN6\n/1Val7L8oSeCH+PJED6qE4EN6IFtghHXav4fA+SbuQKBgQCNy7q3MoBOxDlKOpSN\nChoYUfW0JvwJbyyaVYOVq0efGVobosAblE/IuwaoIuVgh8c4T3qZtwFcSpvfR5Qy\nSOWFs2QXN/P4ZvmiVpXK/9Tcnth2BThpb9apQCT2a/CYtrRiGNAVWKiK0U9QlN/w\n9fVBO/ZgdaXE4xqYOSceH14yrQ==\n-----END PRIVATE KEY-----\n",
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "header",
                    "check": "$.alg",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the UserInfo Response's JWE contain the cty parameter in the JOSE Header",
        "description": "The JWE Token contained in the UserInfo response's body is taken and analyzed. If it contains the 'cty' parameter in the JOSE header, then it is compliant with the specification",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "UserInfo response",
            "decode operations": [
              {
                "jwe decrypt": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC5d8kD7BOVMIDg\nV2ygTSpl+YoiB52Zquu1aBBsSUptaD1ENHtnwlUFpEsWrDJ/IbUkkWbrgbnVwEnA\nsgXBagXufGwf1VgubmhyMCexHhGGV9UTTL/rTCN/yyQmAFGmJdA+XAf2MMZqpUT8\n8QFM5sM7nDdei6sPUXfrT6/lwsMtEd0UkiK10RW2oBOpjkOCVENoqIGGKztrn/Vu\nTzf08MtpCGO7hcmTi28PLn4tWQzLmw/bNTr7W0l0D5WZoFktfL2fT3rsUYhaYzOl\np+sEw64cVxQ4fnqj5yUNqH8IhMfV2rYPrgrQxiESkAI7anwAfgrxDpi4nV2eRUMP\nBmnYLzixAgMBAAECggEBAJ/3jyuQ3TsagK3++bQxmlYmK1w6kVZPM8pdnXyookdH\nV0CSu7W8ybR6BkHh+BPrMN//gXOzimOw3GwVoB04ozEVo/S5ALvbgr6qhjGgK6Fh\n9GgXFJmQLDY3MlCMid/yUXDX1A4l951YOu6nuGVpzA6IKMGlWb92lyYgryhPGiSu\nAVf5xdzbeUes1GKY2UPE9Rg2Qld782t6oJQ613vM6HPqfHC7N6yZ+7TFUiVc5wiK\njn3jNVSINCN59m7m2DsfPLHJB7g53104kw5cquSMA8gR5oiHt36bvnOHtbYgZmzn\n9iKgwml/EnaZ1NoE4/WJWbUTapodzQf65LASli897iECgYEA5PA7lJEDd3vrw5hl\nolFzvjvRriOu1SMHXx9Y52AgpOeQ6MnE1pO8qwn33lwYTSPGYinaq4jS3FKF/U5v\nOZltJAGBMa4ByEvAROJVCh958rKVRWKIqVXLOi8Gk11kHbVKw6oDXAd8Qt/y/ff8\nk/K6jW2EbWm1K6kfTvTMzoHkqrUCgYEAz2QeMH4WtrdiWUET7JgZNX0TbcaVBgd2\nGpo8JHnfnGOUsvO/euKGgqpCcxiWVXSlqffQyTgVzl4iMROP8bEaQwvueHurtziM\nDSy9Suumyktu3PbGgjqu/izRim8Xlg7sz8Hs2quJPII/fQ8BCoaWpg30osFZqCBa\nrQM7CWhxR40CgYA3CVWZap8lu0G7XMiaE/C6O9E1htiB3pDoGjYaMW7Hle+tNsw+\nNXf2uke/Se6BpOcNNDigYh0m4CPb+F4ev7aQIFh5o/ZDu4o2RR7idxyu7qWZ740h\nAEIB88ol5R6rUajujtGN7zK9NO9KhLJQstqMI1bhorbuDxM6vPj7cBiTvQKBgQDJ\nfuJ+BuOWntHlGf97rcNAXsdTrs73TqSG8Ddi0S5ayb2dqIjvoctChJ2PKeJWIMEc\nRHQMLHuzR2489F60WnfDkIIfeTi7CSu5WTCI7C/e+C88bF8uBEolFfJ4Z7soxlN6\n/1Val7L8oSeCH+PJED6qE4EN6IFtghHXav4fA+SbuQKBgQCNy7q3MoBOxDlKOpSN\nChoYUfW0JvwJbyyaVYOVq0efGVobosAblE/IuwaoIuVgh8c4T3qZtwFcSpvfR5Qy\nSOWFs2QXN/P4ZvmiVpXK/9Tcnth2BThpb9apQCT2a/CYtrRiGNAVWKiK0U9QlN/w\n9fVBO/ZgdaXE4xqYOSceH14yrQ==\n-----END PRIVATE KEY-----\n",
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "header",
                    "check": "$.cty",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the UserInfo Response's JWE contain the enc parameter in the JOSE Header",
        "description": "The JWE Token contained in the UserInfo response's body is taken and analyzed. If it contains the 'enc' parameter in the JOSE header, then it is compliant with the specification",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "UserInfo response",
            "decode operations": [
              {
                "jwe decrypt": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC5d8kD7BOVMIDg\nV2ygTSpl+YoiB52Zquu1aBBsSUptaD1ENHtnwlUFpEsWrDJ/IbUkkWbrgbnVwEnA\nsgXBagXufGwf1VgubmhyMCexHhGGV9UTTL/rTCN/yyQmAFGmJdA+XAf2MMZqpUT8\n8QFM5sM7nDdei6sPUXfrT6/lwsMtEd0UkiK10RW2oBOpjkOCVENoqIGGKztrn/Vu\nTzf08MtpCGO7hcmTi28PLn4tWQzLmw/bNTr7W0l0D5WZoFktfL2fT3rsUYhaYzOl\np+sEw64cVxQ4fnqj5yUNqH8IhMfV2rYPrgrQxiESkAI7anwAfgrxDpi4nV2eRUMP\nBmnYLzixAgMBAAECggEBAJ/3jyuQ3TsagK3++bQxmlYmK1w6kVZPM8pdnXyookdH\nV0CSu7W8ybR6BkHh+BPrMN//gXOzimOw3GwVoB04ozEVo/S5ALvbgr6qhjGgK6Fh\n9GgXFJmQLDY3MlCMid/yUXDX1A4l951YOu6nuGVpzA6IKMGlWb92lyYgryhPGiSu\nAVf5xdzbeUes1GKY2UPE9Rg2Qld782t6oJQ613vM6HPqfHC7N6yZ+7TFUiVc5wiK\njn3jNVSINCN59m7m2DsfPLHJB7g53104kw5cquSMA8gR5oiHt36bvnOHtbYgZmzn\n9iKgwml/EnaZ1NoE4/WJWbUTapodzQf65LASli897iECgYEA5PA7lJEDd3vrw5hl\nolFzvjvRriOu1SMHXx9Y52AgpOeQ6MnE1pO8qwn33lwYTSPGYinaq4jS3FKF/U5v\nOZltJAGBMa4ByEvAROJVCh958rKVRWKIqVXLOi8Gk11kHbVKw6oDXAd8Qt/y/ff8\nk/K6jW2EbWm1K6kfTvTMzoHkqrUCgYEAz2QeMH4WtrdiWUET7JgZNX0TbcaVBgd2\nGpo8JHnfnGOUsvO/euKGgqpCcxiWVXSlqffQyTgVzl4iMROP8bEaQwvueHurtziM\nDSy9Suumyktu3PbGgjqu/izRim8Xlg7sz8Hs2quJPII/fQ8BCoaWpg30osFZqCBa\nrQM7CWhxR40CgYA3CVWZap8lu0G7XMiaE/C6O9E1htiB3pDoGjYaMW7Hle+tNsw+\nNXf2uke/Se6BpOcNNDigYh0m4CPb+F4ev7aQIFh5o/ZDu4o2RR7idxyu7qWZ740h\nAEIB88ol5R6rUajujtGN7zK9NO9KhLJQstqMI1bhorbuDxM6vPj7cBiTvQKBgQDJ\nfuJ+BuOWntHlGf97rcNAXsdTrs73TqSG8Ddi0S5ayb2dqIjvoctChJ2PKeJWIMEc\nRHQMLHuzR2489F60WnfDkIIfeTi7CSu5WTCI7C/e+C88bF8uBEolFfJ4Z7soxlN6\n/1Val7L8oSeCH+PJED6qE4EN6IFtghHXav4fA+SbuQKBgQCNy7q3MoBOxDlKOpSN\nChoYUfW0JvwJbyyaVYOVq0efGVobosAblE/IuwaoIuVgh8c4T3qZtwFcSpvfR5Qy\nSOWFs2QXN/P4ZvmiVpXK/9Tcnth2BThpb9apQCT2a/CYtrRiGNAVWKiK0U9QlN/w\n9fVBO/ZgdaXE4xqYOSceH14yrQ==\n-----END PRIVATE KEY-----\n",
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "header",
                    "check": "$.enc",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the UserInfo Response's JWE contain the kid parameter in the JOSE Header",
        "description": "The JWE Token contained in the UserInfo response's body is taken and analyzed. If it contains the 'kid' parameter in the JOSE header, then it is compliant with the specification",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "UserInfo response",
            "decode operations": [
              {
                "jwe decrypt": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC5d8kD7BOVMIDg\nV2ygTSpl+YoiB52Zquu1aBBsSUptaD1ENHtnwlUFpEsWrDJ/IbUkkWbrgbnVwEnA\nsgXBagXufGwf1VgubmhyMCexHhGGV9UTTL/rTCN/yyQmAFGmJdA+XAf2MMZqpUT8\n8QFM5sM7nDdei6sPUXfrT6/lwsMtEd0UkiK10RW2oBOpjkOCVENoqIGGKztrn/Vu\nTzf08MtpCGO7hcmTi28PLn4tWQzLmw/bNTr7W0l0D5WZoFktfL2fT3rsUYhaYzOl\np+sEw64cVxQ4fnqj5yUNqH8IhMfV2rYPrgrQxiESkAI7anwAfgrxDpi4nV2eRUMP\nBmnYLzixAgMBAAECggEBAJ/3jyuQ3TsagK3++bQxmlYmK1w6kVZPM8pdnXyookdH\nV0CSu7W8ybR6BkHh+BPrMN//gXOzimOw3GwVoB04ozEVo/S5ALvbgr6qhjGgK6Fh\n9GgXFJmQLDY3MlCMid/yUXDX1A4l951YOu6nuGVpzA6IKMGlWb92lyYgryhPGiSu\nAVf5xdzbeUes1GKY2UPE9Rg2Qld782t6oJQ613vM6HPqfHC7N6yZ+7TFUiVc5wiK\njn3jNVSINCN59m7m2DsfPLHJB7g53104kw5cquSMA8gR5oiHt36bvnOHtbYgZmzn\n9iKgwml/EnaZ1NoE4/WJWbUTapodzQf65LASli897iECgYEA5PA7lJEDd3vrw5hl\nolFzvjvRriOu1SMHXx9Y52AgpOeQ6MnE1pO8qwn33lwYTSPGYinaq4jS3FKF/U5v\nOZltJAGBMa4ByEvAROJVCh958rKVRWKIqVXLOi8Gk11kHbVKw6oDXAd8Qt/y/ff8\nk/K6jW2EbWm1K6kfTvTMzoHkqrUCgYEAz2QeMH4WtrdiWUET7JgZNX0TbcaVBgd2\nGpo8JHnfnGOUsvO/euKGgqpCcxiWVXSlqffQyTgVzl4iMROP8bEaQwvueHurtziM\nDSy9Suumyktu3PbGgjqu/izRim8Xlg7sz8Hs2quJPII/fQ8BCoaWpg30osFZqCBa\nrQM7CWhxR40CgYA3CVWZap8lu0G7XMiaE/C6O9E1htiB3pDoGjYaMW7Hle+tNsw+\nNXf2uke/Se6BpOcNNDigYh0m4CPb+F4ev7aQIFh5o/ZDu4o2RR7idxyu7qWZ740h\nAEIB88ol5R6rUajujtGN7zK9NO9KhLJQstqMI1bhorbuDxM6vPj7cBiTvQKBgQDJ\nfuJ+BuOWntHlGf97rcNAXsdTrs73TqSG8Ddi0S5ayb2dqIjvoctChJ2PKeJWIMEc\nRHQMLHuzR2489F60WnfDkIIfeTi7CSu5WTCI7C/e+C88bF8uBEolFfJ4Z7soxlN6\n/1Val7L8oSeCH+PJED6qE4EN6IFtghHXav4fA+SbuQKBgQCNy7q3MoBOxDlKOpSN\nChoYUfW0JvwJbyyaVYOVq0efGVobosAblE/IuwaoIuVgh8c4T3qZtwFcSpvfR5Qy\nSOWFs2QXN/P4ZvmiVpXK/9Tcnth2BThpb9apQCT2a/CYtrRiGNAVWKiK0U9QlN/w\n9fVBO/ZgdaXE4xqYOSceH14yrQ==\n-----END PRIVATE KEY-----\n",
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "header",
                    "check": "$.kid",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the entity correctly sign the Entity Configuration",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken and the three parts of the JWT (header, payload and signature) are base64url decoded. Finally, the signature is validated passing the public key (n, e of jwks parameter that must be taken from the Entity Statement of a superior), the JWS Signature (received signature base64url decoded) and the JWS signing input (header and payload base64url encoded and concatenated with a dot dividing them) to a signature verifier configured for the algorithm described in the Entity Configuration Header",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "jwt check sig": "X_key_OP"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP correctly sign the Access Token",
        "description": "Tokens issued by an OP must have the structure of JWT Tokens. In particular, this structure is composed by three base64url encoded strings separated by dots, namely the header, payload and signature. The signature is made using the OP's private key, in such a way to be decrypted using its public key. In this test a normal flow is performed and the obtained Access Token is analyzed. In order to test if the OP correctly signed the signature part of the JWT, the access token is passed to a signature verifier correctly configured",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "jwt check sig": "X_key_core_OP"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP correctly sign the ID Token",
        "description": "Tokens issued by an OP must have the structure of JWT Tokens. In particular, this structure is composed by three base64url encoded strings separated by dots, namely the header, payload and signature. The signature is made using the OP's private key, in such a way to be decrypted using its public key. In this test a normal flow is performed and the obtained ID Token is analyzed. In order to test if the OP correctly signed the signature part of the JWT, the third part of the string is taken and passed to a signature verifier correctly configured",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"id_token\": \")[^\"]+",
                "type": "jwt",
                "jwt check sig": "X_key_core_OP"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does entity configuration contain the exp parameter",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the presence of the exp parameter is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.exp",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does entity configuration contain the iat parameter",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the presence of the iat parameter is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.iat",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does entity configuration contain the iss parameter",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the presence of the iss parameter is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.iss",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does entity configuration contain the jwks parameter",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the presence of the jwks parameter is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.jwks",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does entity configuration contain the metadata parameter",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the presence of the metadata parameter is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does entity configuration contain the sub parameter",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the presence of the sub parameter is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.sub",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP's entity configuration contain the authority_hints parameter",
        "description": "To accomplish this test, the Entity configuration of the OP is taken, the payload is decoded (Base64 encoding) and the presence of the authority_hints parameter is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.authority_hints",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP's entity configuration contain the trust_marks parameter",
        "description": "To accomplish this test, the Entity configuration of the OP is taken, the payload is decoded (Base64 encoding) and the presence of the trust_marks parameter is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.trust_marks",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain the 'alg' parameter in the Header",
        "description": "In this test, the Access Token is taken from the Token Response, the header is base64url decoded and the presence of the 'alg' parameter in the Header is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "header",
                    "check": "$.alg",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain the 'kid' parameter in the Header",
        "description": "The Access Token is taken from the Token Response and the presence of the 'kid' parameter in the Header is checked. If it is not present, than the Access Token is not compliant.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "header",
                    "check": "$.kid",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain the 'typ' parameter in the Header",
        "description": "The Access Token present in the Token response is analyzed and the presence of the 'typ' parameter in the header is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "header",
                    "check": "$.typ",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain the 'aud' parameter in the Payload",
        "description": "The Access Token present in the Token Response is analyzed and the presence of the 'aud' parameter in the Payload is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.aud",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain the 'client_id' parameter in the Payload",
        "description": "The Access Token present in the Token Response is analyzed and the presence of the 'client_id' parameter in the Payload is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.client_id",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain the 'exp' parameter in the Payload",
        "description": "The Access Token present in the Token Response is analyzed and the presence of the 'exp' parameter in the Payload is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.exp",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain the 'iat' parameter in the Payload",
        "description": "The Access Token present in the Token Response is analyzed and the presence of the 'iat' parameter in the Payload is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.iat",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain the 'iss' parameter in the Payload",
        "description": "The Access Token present in the Token Response is analyzed and the presence of the 'iss' parameter in the Payload is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.iss",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain the 'jti' parameter in the Payload",
        "description": "The Access Token present in the Token Response is analyzed and the presence of the 'jti' parameter in the Payload is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.jti",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain the 'scope' parameter in the Payload",
        "description": "The Access Token present in the Token Response is analyzed and the presence of the 'scope' parameter in the Payload is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.scope",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain the 'sub' parameter in the Payload",
        "description": "The Access Token present in the Token Response is analyzed and the presence of the 'sub' parameter in the Payload is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.sub",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT ID Token contain a correct 'alg' parameter in the Header",
        "description": "In this test, the ID Token is taken from the Token Response, the header is base64url decoded and the presence of the 'alg' parameter in the Header is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"id_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "header",
                    "check": "$.alg",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT ID Token contain the 'kid' parameter in the Header",
        "description": "The ID Token is taken from the Token Response and the presence of the 'kid' parameter in the Header is checked. If it is not present, than the ID Token is not compliant.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"id_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "header",
                    "check": "$.kid",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT ID Token contain the 'acr' parameter in the Payload",
        "description": "The ID Token present in the Token Response is taken, the payload is base64url decoded, analyzed and the presence of the 'acr' parameter in the Payload is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"id_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.acr",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does ID token payload contain the 'at_hash' parameter",
        "description": "The ID Token present in the Token Response is taken, the payload is base64url decoded, analyzed and the presence of the 'at_hash' parameter in the Payload is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"id_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.at_hash",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT ID Token contain the 'aud' parameter in the Payload",
        "description": "The ID Token present in the Token Response is taken, the payload is base64url decoded, analyzed and the presence of the 'aud' parameter in the Payload is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"id_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.aud",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT ID Token contain the 'exp' parameter in the Payload",
        "description": "The ID Token present in the Token Response is taken, the payload is base64url decoded, analyzed and the presence of the 'exp' parameter in the Payload is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"id_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.exp",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT ID Token contain the 'iat' parameter in the Payload",
        "description": "The ID Token present in the Token Response is taken, the payload is base64url decoded, analyzed and the presence of the 'iat' parameter in the Payload is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"id_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.iat",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT ID Token contain the 'iss' parameter in the Payload",
        "description": "The ID Token present in the Token Response is taken, the payload is base64url decoded, analyzed and the presence of the 'iss' parameter is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"id_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.iss",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT ID Token contain the 'jti' parameter in the Payload",
        "description": "The ID Token present in the Token Response is taken, the payload is base64url decoded, analyzed and the presence of the 'jti' parameter in the Payload is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"id_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.jti",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT ID Token contain the 'nonce' parameter in the Payload",
        "description": "The ID Token present in the Token Response is taken, the payload is base64url decoded, analyzed and the presence of the 'nonce' parameter in the Payload is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"id_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.nonce",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT ID Token contain the 'sub' parameter in the Payload",
        "description": "The ID Token present in the Token Response is taken, the payload is base64url decoded, analyzed and the presence of the 'sub' parameter in the Payload is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"id_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.sub",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the UserInfo Response's JWE contain a correct alg parameter in the JOSE Header",
        "description": "The JWE Token contained in the UserInfo response is taken and analyzed. If it contains the 'alg' parameter containing a value among ['RSA-OAEP', 'RSA-OAEP-256', 'ECDH-ES', 'ECDH-ES+A128KW', 'ECDH-ES+A256KW'] in the JOSE header, then it is compliant with the specification",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "UserInfo response",
            "decode operations": [
              {
                "jwe decrypt": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC5d8kD7BOVMIDg\nV2ygTSpl+YoiB52Zquu1aBBsSUptaD1ENHtnwlUFpEsWrDJ/IbUkkWbrgbnVwEnA\nsgXBagXufGwf1VgubmhyMCexHhGGV9UTTL/rTCN/yyQmAFGmJdA+XAf2MMZqpUT8\n8QFM5sM7nDdei6sPUXfrT6/lwsMtEd0UkiK10RW2oBOpjkOCVENoqIGGKztrn/Vu\nTzf08MtpCGO7hcmTi28PLn4tWQzLmw/bNTr7W0l0D5WZoFktfL2fT3rsUYhaYzOl\np+sEw64cVxQ4fnqj5yUNqH8IhMfV2rYPrgrQxiESkAI7anwAfgrxDpi4nV2eRUMP\nBmnYLzixAgMBAAECggEBAJ/3jyuQ3TsagK3++bQxmlYmK1w6kVZPM8pdnXyookdH\nV0CSu7W8ybR6BkHh+BPrMN//gXOzimOw3GwVoB04ozEVo/S5ALvbgr6qhjGgK6Fh\n9GgXFJmQLDY3MlCMid/yUXDX1A4l951YOu6nuGVpzA6IKMGlWb92lyYgryhPGiSu\nAVf5xdzbeUes1GKY2UPE9Rg2Qld782t6oJQ613vM6HPqfHC7N6yZ+7TFUiVc5wiK\njn3jNVSINCN59m7m2DsfPLHJB7g53104kw5cquSMA8gR5oiHt36bvnOHtbYgZmzn\n9iKgwml/EnaZ1NoE4/WJWbUTapodzQf65LASli897iECgYEA5PA7lJEDd3vrw5hl\nolFzvjvRriOu1SMHXx9Y52AgpOeQ6MnE1pO8qwn33lwYTSPGYinaq4jS3FKF/U5v\nOZltJAGBMa4ByEvAROJVCh958rKVRWKIqVXLOi8Gk11kHbVKw6oDXAd8Qt/y/ff8\nk/K6jW2EbWm1K6kfTvTMzoHkqrUCgYEAz2QeMH4WtrdiWUET7JgZNX0TbcaVBgd2\nGpo8JHnfnGOUsvO/euKGgqpCcxiWVXSlqffQyTgVzl4iMROP8bEaQwvueHurtziM\nDSy9Suumyktu3PbGgjqu/izRim8Xlg7sz8Hs2quJPII/fQ8BCoaWpg30osFZqCBa\nrQM7CWhxR40CgYA3CVWZap8lu0G7XMiaE/C6O9E1htiB3pDoGjYaMW7Hle+tNsw+\nNXf2uke/Se6BpOcNNDigYh0m4CPb+F4ev7aQIFh5o/ZDu4o2RR7idxyu7qWZ740h\nAEIB88ol5R6rUajujtGN7zK9NO9KhLJQstqMI1bhorbuDxM6vPj7cBiTvQKBgQDJ\nfuJ+BuOWntHlGf97rcNAXsdTrs73TqSG8Ddi0S5ayb2dqIjvoctChJ2PKeJWIMEc\nRHQMLHuzR2489F60WnfDkIIfeTi7CSu5WTCI7C/e+C88bF8uBEolFfJ4Z7soxlN6\n/1Val7L8oSeCH+PJED6qE4EN6IFtghHXav4fA+SbuQKBgQCNy7q3MoBOxDlKOpSN\nChoYUfW0JvwJbyyaVYOVq0efGVobosAblE/IuwaoIuVgh8c4T3qZtwFcSpvfR5Qy\nSOWFs2QXN/P4ZvmiVpXK/9Tcnth2BThpb9apQCT2a/CYtrRiGNAVWKiK0U9QlN/w\n9fVBO/ZgdaXE4xqYOSceH14yrQ==\n-----END PRIVATE KEY-----\n",
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "header",
                    "check": "$.alg",
                    "is in": [
                      "RSA-OAEP",
                      "RSA-OAEP-256",
                      "ECDH-ES",
                      "ECDH-ES+A128KW",
                      "ECDH-ES+A256KW"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the UserInfo Response's JWE contain a correct enc parameter in the JOSE Header",
        "description": "The JWE Token contained in the UserInfo response is taken and analyzed. If it contains the 'enc' parameter containing a value among ['A128CBC-HS256', 'A256CBC-HS512'] in the JOSE header, then it is compliant with the specification",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "UserInfo response",
            "decode operations": [
              {
                "jwe decrypt": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC5d8kD7BOVMIDg\nV2ygTSpl+YoiB52Zquu1aBBsSUptaD1ENHtnwlUFpEsWrDJ/IbUkkWbrgbnVwEnA\nsgXBagXufGwf1VgubmhyMCexHhGGV9UTTL/rTCN/yyQmAFGmJdA+XAf2MMZqpUT8\n8QFM5sM7nDdei6sPUXfrT6/lwsMtEd0UkiK10RW2oBOpjkOCVENoqIGGKztrn/Vu\nTzf08MtpCGO7hcmTi28PLn4tWQzLmw/bNTr7W0l0D5WZoFktfL2fT3rsUYhaYzOl\np+sEw64cVxQ4fnqj5yUNqH8IhMfV2rYPrgrQxiESkAI7anwAfgrxDpi4nV2eRUMP\nBmnYLzixAgMBAAECggEBAJ/3jyuQ3TsagK3++bQxmlYmK1w6kVZPM8pdnXyookdH\nV0CSu7W8ybR6BkHh+BPrMN//gXOzimOw3GwVoB04ozEVo/S5ALvbgr6qhjGgK6Fh\n9GgXFJmQLDY3MlCMid/yUXDX1A4l951YOu6nuGVpzA6IKMGlWb92lyYgryhPGiSu\nAVf5xdzbeUes1GKY2UPE9Rg2Qld782t6oJQ613vM6HPqfHC7N6yZ+7TFUiVc5wiK\njn3jNVSINCN59m7m2DsfPLHJB7g53104kw5cquSMA8gR5oiHt36bvnOHtbYgZmzn\n9iKgwml/EnaZ1NoE4/WJWbUTapodzQf65LASli897iECgYEA5PA7lJEDd3vrw5hl\nolFzvjvRriOu1SMHXx9Y52AgpOeQ6MnE1pO8qwn33lwYTSPGYinaq4jS3FKF/U5v\nOZltJAGBMa4ByEvAROJVCh958rKVRWKIqVXLOi8Gk11kHbVKw6oDXAd8Qt/y/ff8\nk/K6jW2EbWm1K6kfTvTMzoHkqrUCgYEAz2QeMH4WtrdiWUET7JgZNX0TbcaVBgd2\nGpo8JHnfnGOUsvO/euKGgqpCcxiWVXSlqffQyTgVzl4iMROP8bEaQwvueHurtziM\nDSy9Suumyktu3PbGgjqu/izRim8Xlg7sz8Hs2quJPII/fQ8BCoaWpg30osFZqCBa\nrQM7CWhxR40CgYA3CVWZap8lu0G7XMiaE/C6O9E1htiB3pDoGjYaMW7Hle+tNsw+\nNXf2uke/Se6BpOcNNDigYh0m4CPb+F4ev7aQIFh5o/ZDu4o2RR7idxyu7qWZ740h\nAEIB88ol5R6rUajujtGN7zK9NO9KhLJQstqMI1bhorbuDxM6vPj7cBiTvQKBgQDJ\nfuJ+BuOWntHlGf97rcNAXsdTrs73TqSG8Ddi0S5ayb2dqIjvoctChJ2PKeJWIMEc\nRHQMLHuzR2489F60WnfDkIIfeTi7CSu5WTCI7C/e+C88bF8uBEolFfJ4Z7soxlN6\n/1Val7L8oSeCH+PJED6qE4EN6IFtghHXav4fA+SbuQKBgQCNy7q3MoBOxDlKOpSN\nChoYUfW0JvwJbyyaVYOVq0efGVobosAblE/IuwaoIuVgh8c4T3qZtwFcSpvfR5Qy\nSOWFs2QXN/P4ZvmiVpXK/9Tcnth2BThpb9apQCT2a/CYtrRiGNAVWKiK0U9QlN/w\n9fVBO/ZgdaXE4xqYOSceH14yrQ==\n-----END PRIVATE KEY-----\n",
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "header",
                    "check": "$.enc",
                    "is in": [
                      "A128CBC-HS256",
                      "A256CBC-HS512"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the UserInfo Response's JWE contain a correct alg parameter in the JOSE Header",
        "description": "In this test, the JWE is taken from the Userinfo Response's body, the header is base64url decoded and the presence of the 'alg' parameter in the Header is checked. If its value is set to none, contains values among ['none', 'HS256', 'HS384', 'HS512'], is absent or contains a symmetric algorithm, than the Token is not compliant.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "UserInfo response",
            "decode operations": [
              {
                "jwe decrypt": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC5d8kD7BOVMIDg\nV2ygTSpl+YoiB52Zquu1aBBsSUptaD1ENHtnwlUFpEsWrDJ/IbUkkWbrgbnVwEnA\nsgXBagXufGwf1VgubmhyMCexHhGGV9UTTL/rTCN/yyQmAFGmJdA+XAf2MMZqpUT8\n8QFM5sM7nDdei6sPUXfrT6/lwsMtEd0UkiK10RW2oBOpjkOCVENoqIGGKztrn/Vu\nTzf08MtpCGO7hcmTi28PLn4tWQzLmw/bNTr7W0l0D5WZoFktfL2fT3rsUYhaYzOl\np+sEw64cVxQ4fnqj5yUNqH8IhMfV2rYPrgrQxiESkAI7anwAfgrxDpi4nV2eRUMP\nBmnYLzixAgMBAAECggEBAJ/3jyuQ3TsagK3++bQxmlYmK1w6kVZPM8pdnXyookdH\nV0CSu7W8ybR6BkHh+BPrMN//gXOzimOw3GwVoB04ozEVo/S5ALvbgr6qhjGgK6Fh\n9GgXFJmQLDY3MlCMid/yUXDX1A4l951YOu6nuGVpzA6IKMGlWb92lyYgryhPGiSu\nAVf5xdzbeUes1GKY2UPE9Rg2Qld782t6oJQ613vM6HPqfHC7N6yZ+7TFUiVc5wiK\njn3jNVSINCN59m7m2DsfPLHJB7g53104kw5cquSMA8gR5oiHt36bvnOHtbYgZmzn\n9iKgwml/EnaZ1NoE4/WJWbUTapodzQf65LASli897iECgYEA5PA7lJEDd3vrw5hl\nolFzvjvRriOu1SMHXx9Y52AgpOeQ6MnE1pO8qwn33lwYTSPGYinaq4jS3FKF/U5v\nOZltJAGBMa4ByEvAROJVCh958rKVRWKIqVXLOi8Gk11kHbVKw6oDXAd8Qt/y/ff8\nk/K6jW2EbWm1K6kfTvTMzoHkqrUCgYEAz2QeMH4WtrdiWUET7JgZNX0TbcaVBgd2\nGpo8JHnfnGOUsvO/euKGgqpCcxiWVXSlqffQyTgVzl4iMROP8bEaQwvueHurtziM\nDSy9Suumyktu3PbGgjqu/izRim8Xlg7sz8Hs2quJPII/fQ8BCoaWpg30osFZqCBa\nrQM7CWhxR40CgYA3CVWZap8lu0G7XMiaE/C6O9E1htiB3pDoGjYaMW7Hle+tNsw+\nNXf2uke/Se6BpOcNNDigYh0m4CPb+F4ev7aQIFh5o/ZDu4o2RR7idxyu7qWZ740h\nAEIB88ol5R6rUajujtGN7zK9NO9KhLJQstqMI1bhorbuDxM6vPj7cBiTvQKBgQDJ\nfuJ+BuOWntHlGf97rcNAXsdTrs73TqSG8Ddi0S5ayb2dqIjvoctChJ2PKeJWIMEc\nRHQMLHuzR2489F60WnfDkIIfeTi7CSu5WTCI7C/e+C88bF8uBEolFfJ4Z7soxlN6\n/1Val7L8oSeCH+PJED6qE4EN6IFtghHXav4fA+SbuQKBgQCNy7q3MoBOxDlKOpSN\nChoYUfW0JvwJbyyaVYOVq0efGVobosAblE/IuwaoIuVgh8c4T3qZtwFcSpvfR5Qy\nSOWFs2QXN/P4ZvmiVpXK/9Tcnth2BThpb9apQCT2a/CYtrRiGNAVWKiK0U9QlN/w\n9fVBO/ZgdaXE4xqYOSceH14yrQ==\n-----END PRIVATE KEY-----\n",
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "header",
                    "check": "$.alg",
                    "is not in": [
                      "none",
                      "HS256",
                      "HS384",
                      "HS512"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain an incorrect id_token_encryption_alg_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'id_token_encryption_alg_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked. It must not contain the value ['RSA_1_5']",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.id_token_encryption_alg_values_supported",
                    "not contains": [
                      "RSA_1_5"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain incorrect id_token_signing_alg_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'id_token_signing_alg_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked. It must not contain the values ['none', 'HS256', 'HS384', 'HS512']",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.id_token_signing_alg_values_supported",
                    "not contains": [
                      "none",
                      "HS256",
                      "HS384",
                      "HS512"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain incorrect request_authentication_signing_alg_values_supported claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the value of the request_authentication_signing_alg_values_supported claim in the 'openid_provider' entity type is checked. It must not contain the values ['none', 'HS256', 'HS384', 'HS512']",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.request_authentication_signing_alg_values_supported[0]",
                    "not contains": [
                      "none",
                      "HS256",
                      "HS384",
                      "HS512"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain incorrect request_object_signing_alg_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'request_object_signing_alg_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked. It must not contain the values ['none', 'HS256', 'HS384', 'HS512']",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.request_object_signing_alg_values_supported",
                    "not contains": [
                      "none",
                      "HS256",
                      "HS384",
                      "HS512"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain incorrect token_endpoint_auth_signing_alg_values_supported claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the value of the token_endpoint_auth_signing_alg_values_supported claim in the 'openid_provider' entity type is checked. It must not contain the values ['none', 'HS256', 'HS384', 'HS512']",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.token_endpoint_auth_signing_alg_values_supported",
                    "not contains": [
                      "none",
                      "HS256",
                      "HS384",
                      "HS512"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain incorrect userinfo_encryption_alg_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'userinfo_encryption_alg_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked. It must not contain the values ['RSA_1_5']",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.userinfo_encryption_alg_values_supported",
                    "not contains": [
                      "RSA_1_5"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain incorrect userinfo_signing_alg_values_supported claim in the openid_provider subclaim",
        "description": "In this test the OP metadata are taken and the value of the 'userinfo_signing_alg_values_supported' parameter in the 'openid_provider' subclaim (metadata type) is checked. It must not contain the values ['none', 'HS256', 'HS384', 'HS512']",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.userinfo_signing_alg_values_supported",
                    "not contains": [
                      "none",
                      "HS256",
                      "HS384",
                      "HS512"
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the entity configuration of a considered entity return a Federation Metadata in JOSE format when an HTTP GET request is made to its .well-known/openid-federation endpoint",
        "description": "The considered entity must have published its entity configuration in the .well-known/openid-federation endpoint. So in this test, an HTTP GET request is made to the entity's .well-known/openid-federation endpoint (appended to the URL which identifies the entity) and the response is analyzed. This response has to be the entity configuration of the entity and therefore a Federation Metadata in JOSE format (Content-Type: application/entity-statement+jwt)",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "checks": [
              {
                "in": "body",
                "check regex": "([\\w=]+)\\.([\\w=]+)\\.([\\w\\-\\+\\/=]*)",
                "is present": "true"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the Entity expose the resolve entity statement endpoint",
        "description": "In order to check the presence and correctness of the resolve entity statement endpoint, an HTTP GET request containing the parameters 'sub', 'anchor' and 'type' is made to the entity's endpoint and an HTTP 200 OK response containing the resolved metadata for the entity in the request's sub claim is expected.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Resolve Entity Statement response",
            "checks": [
              {
                "in": "body",
                "check regex": "[\\s*\"[^\"]*\"(?:,\\s*\"[^\"]*\")*\\s*\\]$",
                "is present": "true"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP contain the correct type of code parameter on redirect in a successful authentication",
        "description": "In order to check if the OP correctly handles a successful authentication request, a correct request is sent by a client and the behavior of the OP is analyzed. In particular, the client must be redirected to its redirect_uri and the redirect must have 'code' as query parameter and it must be a UUID.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication response",
            "checks": [
              {
                "in": "head",
                "check regex": "(?<=code=)[a-zA-Z0-9]+(?=&)",
                "is present": "true"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the successful token response contain a valid access token",
        "description": "In this test a correct Token request is sent and the response is analyzed. It must contain the access token parameter and its value must be a JWT",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "checks": [
              {
                "in": "body",
                "check regex": "(?<=\"access_token\":\\s?)\"([\\w\\-]+\\.[\\w\\-]+\\.[\\w\\-]+)\"",
                "is present": "true"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the successful token response contain a valid ID token",
        "description": "The RP receiving the Token response and that sent a correct token request must check the presence of a valid ID token",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "checks": [
              {
                "in": "body",
                "check regex": "(?<=\"id_token\":\\s?)\"([\\w\\-]+\\.[\\w\\-]+\\.[\\w\\-]+)\"",
                "is present": "true"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the UserInfo Endpoint create a signed and encrypted JWT",
        "description": "The UserInfo response is taken and the presence of a signed and encrypted JWE in the body of the response is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "UserInfo response",
            "checks": [
              {
                "in": "body",
                "check regex": "[\\w\\-]+\\.[\\w\\-]+\\.[\\w\\-]+\\.[\\w\\-]+\\.[\\w\\-]+$",
                "is present": "true"
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the metadata parameter contain only allowed types",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the metadata parameter is analyzed. This must be a JSON object with each key representing a type of metadata. These types must be a value among the following: 'openid_relying_party', 'openid_provider', 'federation_entity', 'oauth_authorization_server', 'oauth_resource'",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\n\\r]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata",
                    "json schema compliant": "{\"type\": \"object\",\"anyOf\": [{\"required\": [\"openid_relying_party\"]},{\"required\": [\"openid_provider\"]},{\"required\": [\"federation_entity\"]},{\"required\": [\"oauth_authorization_server\"]},{\"required\": [\"oauth_resource\"]}],\"properties\": {\"openid_relying_party\":{\"type\":\"object\"},\"openid_provider\":{\"type\":\"object\"},\"federation_entity\":{\"type\":\"object\"},\"oauth_authorization_server\":{\"type\":\"object\"},\"oauth_resource\":{\"type\":\"object\"}}, \"additionalProperties\": false}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does entity configuration contain a correct exp parameter",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the presence of the exp parameter is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$",
                    "json schema compliant": "{\"type\": \"object\", \"properties\": {\"exp\": {\"type\": \"integer\", \"minimum\": 0}}, \"required\": [\"exp\"]}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does entity configuration contain a correct iat parameter",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the presence of the iat parameter is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$",
                    "json schema compliant": "{\"type\": \"object\", \"properties\": {\"iat\": {\"type\": \"integer\", \"minimum\": 0}}, \"required\": [\"iat\"]}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the metadata parameter contain a JSON Object",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the metadata parameter is analyzed. This must be a JSON object.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$",
                    "json schema compliant": "{\"type\": \"object\", \"properties\": {\"metadata\": {\"type\": \"object\"}}, \"required\": [\"metadata\"]}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP's entity configuration contain a correct authority_hints parameter",
        "description": "To accomplish this test, the Entity configuration of the OP is taken, the payload is decoded (Base64 encoding) and the authority_hints parameter is checked, it must be an array",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$",
                    "json schema compliant": "{\"type\": \"object\", \"properties\": {\"authority_hints\": {\"type\": \"array\"}}, \"required\": [\"authority_hints\"]}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct type issuer parameter",
        "description": "In this test the OP metadata are taken and the 'issuer' parameter in the 'openid_provider' subclaim (metadata type) is checked to be an URL with no query or fragment component",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\n\\r]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider",
                    "json schema compliant": "{\"type\":\"object\", \"properties\":{\"issuer\":{\"type\":\"string\", \"format\":\"uri\"}},\"required\":[\"issuer\"]}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain correct type logo_uri claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the value of the logo_uri claim in the 'federation_entity' entity type is an URL",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\n\\r]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.federation_entity",
                    "json schema compliant": "{\"type\":\"object\", \"properties\":{\"logo_uri\":{\"type\":\"string\", \"format\":\"uri\", \"pattern\": \"^(https?://).*\\\\.svg$\"}},\"required\":[\"logo_uri\"]}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the correct value of request_authentication_methods_supported claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the request_authentication_methods_supported claim in the 'openid_provider' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.request_authentication_methods_supported",
                    "json schema compliant": "{\"type\": \"object\",\"additionalProperties\": {\"type\": \"array\",\"items\": {\"type\": \"string\",\"const\": \"request_object\"}}}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP's entity configuration contain a correct trust_marks parameter",
        "description": "To accomplish this test, the Entity configuration of the OP is taken, the payload is decoded (Base64 encoding) and the trust_marks parameter is checked, it must be a JSON array",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$",
                    "json schema compliant": "{\"type\": \"object\", \"properties\": {\"trust_marks\": {\"type\": \"object\", \"additionalProperties\": {\"type\": \"array\"}}}, \"required\": [\"trust_marks\"]}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain a correct 'aud' parameter",
        "description": "The Access Token present in the Token Response is analyzed and the value of the 'aud' parameter in the Payload is the identifier of the resource server",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$",
                    "json schema compliant": "{\"type\":\"object\", \"properties\":{\"aud\":{\"type\":\"array\"}},\"required\":[\"aud\"]}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain the 'client_id' parameter in the Payload as an HTTPS url",
        "description": "The Access Token present in the Token Response is analyzed and the value of the 'client_id' parameter in the Payload must be an HTTPS URL.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$",
                    "json schema compliant": "{\"type\": \"object\", \"properties\": {\"client_id\": {\"type\": \"string\", \"format\": \"uri-reference\", \"pattern\": \"^https://\"}}, \"required\": [\"client_id\"]}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain a timestamp as the 'exp' parameter in the Payload",
        "description": "The Access Token present in the Token Response is analyzed and the presence of the 'exp' parameter in the Payload is checked. In particular, this parameter must be a valid timestamp",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$",
                    "json schema compliant": "{\"type\": \"object\", \"properties\": {\"exp\": {\"type\": \"integer\", \"minimum\": 0}}, \"required\": [\"exp\"]}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain a correct 'iat' parameter in the Payload",
        "description": "The Access Token present in the Token Response is analyzed and the presence of the 'iat' parameter in the Payload is a timestamp.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$",
                    "json schema compliant": "{\"type\": \"object\", \"properties\": {\"iat\": {\"type\": \"integer\", \"minimum\": 0}}, \"required\": [\"iat\"]}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token's 'iss' parameter contain an URL",
        "description": "The Access Token present in the Token Response is analyzed and the 'iss' parameter in the Payload is checked, in particular, its value must be an HTTPS URL",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$",
                    "json schema compliant": "{\"type\": \"object\", \"properties\": {\"iss\": {\"type\": \"string\", \"format\": \"uri-reference\", \"pattern\": \"^https://\"}}, \"required\": [\"iss\"]}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT Access Token contain the 'jti' parameter in the Payload in uuid4 format",
        "description": "The Access Token present in the Token Response is analyzed and the value of the 'jti' parameter in the Payload must be based on uuid4 format.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"access_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$",
                    "json schema compliant": "{\"type\": \"object\", \"properties\": {\"jti\": {\"type\": \"string\", \"pattern\": \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"}}, \"required\": [\"jti\"]}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT ID Token contain a correct 'exp' parameter in the Payload",
        "description": "The ID Token present in the Token Response is taken, the payload is base64url decoded, analyzed and the type of the 'exp' parameter in the Payload is checked. In particular, its value must be a timestamp",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=id_token: \")([^\"]+)",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$",
                    "json schema compliant": "{\"type\": \"object\", \"properties\": {\"exp\": {\"type\": \"integer\", \"minimum\": 0}}, \"required\": [\"exp\"]}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT ID Token contain a correct 'iat' parameter in the Payload",
        "description": "The ID Token present in the Token Response is taken, the payload is base64url decoded, analyzed and the presence of the 'iat' parameter in the Payload is checked. In particular, its value must be a timestamp",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=id_token: \")([^\"]+)",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$",
                    "json schema compliant": "{\"type\": \"object\", \"properties\": {\"iat\": {\"type\": \"integer\", \"minimum\": 0}}, \"required\": [\"iat\"]}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT ID Token contain the 'iss' parameter in the Payload as an HTTPS URL",
        "description": "The ID Token present in the Token Response is taken, the payload is base64url decoded, analyzed and the presence of the 'iss' parameter has to be an HTTPS URL identifying the OP",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"id_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$",
                    "json schema compliant": "{\"type\": \"object\", \"properties\": {\"iss\": {\"type\": \"string\", \"const\": \"X_https_OP\"}}, \"required\":[\"iss\"]})"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the issued JWT ID Token contain a correct 'sub' parameter in the Payload",
        "description": "The ID Token present in the Token Response is taken, the payload is base64url decoded, analyzed and the 'sub' parameter is checked to be a string",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token response",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=\"id_token\": \")[^\"]+",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$",
                    "json schema compliant": "{\"type\": \"object\", \"properties\": {\"sub\": {\"type\": \"string\", \"pattern\": \"^[0-9a-f]{64}$\"}}, \"required\": [\"sub\"]}"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test suite": {
        "name": "Single test",
        "description": "One test only",
        "filter messages": true
      },
      "tests": [
        {
          "test": {
            "name": "Does the metadata parameter contain only allowed types and only once for each",
            "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the metadata parameter is analyzed. This must be a JSON object with each key representing a type of metadata. These types cannot be repeated and must be a value among the following: 'openid_relying_party', 'openid_provider', 'federation_entity', 'oauth_authorization_server', 'oauth_resource'",
            "type": "passive",
            "sessions": [
              "s1"
            ],
            "operations": [
              {
                "message type": "Entity Configuration response OP",
                "decode operations": [
                  {
                    "from": "body",
                    "decode param": "[^\\n\\r]*",
                    "type": "jwt",
                    "checks": [
                      {
                        "in": "payload",
                        "check": "$.metadata",
                        "not matches regex": "openid_relying_party.*(\\n.*)+\"openid_relying_party\""
                      }
                    ]
                  }
                ]
              }
            ],
            "result": "correct flow s1"
          }
        }
      ]
    },
    {
      "test suite": {
        "name": "Single test",
        "description": "One test only",
        "filter messages": true
      },
      "tests": [
        {
          "test": {
            "name": "Does the metadata parameter contain only allowed types and only once for each",
            "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the metadata parameter is analyzed. This must be a JSON object with each key representing a type of metadata. These types cannot be repeated and must be a value among the following: 'openid_relying_party', 'openid_provider', 'federation_entity', 'oauth_authorization_server', 'oauth_resource'",
            "type": "passive",
            "sessions": [
              "s1"
            ],
            "operations": [
              {
                "message type": "Entity Configuration response OP",
                "decode operations": [
                  {
                    "from": "body",
                    "decode param": "[^\\n\\r]*",
                    "type": "jwt",
                    "checks": [
                      {
                        "in": "payload",
                        "check": "$.metadata",
                        "not matches regex": "openid_provider.*(\\n.*)+\"openid_provider\""
                      }
                    ]
                  }
                ]
              }
            ],
            "result": "correct flow s1"
          }
        }
      ]
    },
    {
      "test suite": {
        "name": "Single test",
        "description": "One test only",
        "filter messages": true
      },
      "tests": [
        {
          "test": {
            "name": "Does the metadata parameter contain only allowed types and only once for each",
            "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the metadata parameter is analyzed. This must be a JSON object with each key representing a type of metadata. These types cannot be repeated and must be a value among the following: 'openid_relying_party', 'openid_provider', 'federation_entity', 'oauth_authorization_server', 'oauth_resource'",
            "type": "passive",
            "sessions": [
              "s1"
            ],
            "operations": [
              {
                "message type": "Entity Configuration response OP",
                "decode operations": [
                  {
                    "from": "body",
                    "decode param": "[^\\n\\r]*",
                    "type": "jwt",
                    "checks": [
                      {
                        "in": "payload",
                        "check": "$.metadata",
                        "not matches regex": "federation_entity.*(\\n.*)+\"federation_entity\""
                      }
                    ]
                  }
                ]
              }
            ],
            "result": "correct flow s1"
          }
        }
      ]
    },
    {
      "test suite": {
        "name": "Single test",
        "description": "One test only",
        "filter messages": true
      },
      "tests": [
        {
          "test": {
            "name": "Does the metadata parameter contain only allowed types and only once for each",
            "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the metadata parameter is analyzed. This must be a JSON object with each key representing a type of metadata. These types cannot be repeated and must be a value among the following: 'openid_relying_party', 'openid_provider', 'federation_entity', 'oauth_authorization_server', 'oauth_resource'",
            "type": "passive",
            "sessions": [
              "s1"
            ],
            "operations": [
              {
                "message type": "Entity Configuration response OP",
                "decode operations": [
                  {
                    "from": "body",
                    "decode param": "[^\\n\\r]*",
                    "type": "jwt",
                    "checks": [
                      {
                        "in": "payload",
                        "check": "$.metadata",
                        "not matches regex": "oauth_authorization_server.*(\\n.*)+\"oauth_authorization_server\""
                      }
                    ]
                  }
                ]
              }
            ],
            "result": "correct flow s1"
          }
        }
      ]
    },
    {
      "test suite": {
        "name": "Single test",
        "description": "One test only",
        "filter messages": true
      },
      "tests": [
        {
          "test": {
            "name": "Does the metadata parameter contain only allowed types and only once for each",
            "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the metadata parameter is analyzed. This must be a JSON object with each key representing a type of metadata. These types cannot be repeated and must be a value among the following: 'openid_relying_party', 'openid_provider', 'federation_entity', 'oauth_authorization_server', 'oauth_resource'",
            "type": "passive",
            "sessions": [
              "s1"
            ],
            "operations": [
              {
                "message type": "Entity Configuration response OP",
                "decode operations": [
                  {
                    "from": "body",
                    "decode param": "[^\\n\\r]*",
                    "type": "jwt",
                    "checks": [
                      {
                        "in": "payload",
                        "check": "$.metadata",
                        "not matches regex": "oauth_resource.*(\\n.*)+\"oauth_resource\""
                      }
                    ]
                  }
                ]
              }
            ],
            "result": "correct flow s1"
          }
        }
      ]
    },
    {
      "test": {
        "name": "Does entity configuration OP contain a correct sub parameter",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the sub parameter is checked. Its value must be equal to the one in the iss parameter",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.sub",
                    "is": "X_key_OP"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the correct value of authorization_response_iss_parameter_supported claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the authorization_response_iss_parameter_supported claim in the 'openid_provider' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.authorization_response_iss_parameter_supported.value",
                    "is": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the correct value of claims_parameter_supported claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the claims_parameter_supported claim in the 'openid_provider' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.claims_parameter_supported.value",
                    "is": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    },
    {
      "test": {
        "name": "Does the OP metadata contain the correct value of request_parameter_supported claim",
        "description": "In this test the OP metadata in the OP Entity Configuration are taken and the presence of the request_parameter_supported claim in the 'openid_provider' entity type is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response OP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[^\\r\\n]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata.openid_provider.request_parameter_supported.value",
                    "is": "true"
                  }
                ]
              }
            ]
          }
        ],
        "result": "correct flow s1"
      }
    }
  ]
}