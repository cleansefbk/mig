{
  "test suite": {
    "description": "Active tests - RP-Authentication",
    "filter messages": true,
    "name": "Active tests - RP-Authentication"
  },
  "tests": [
    {
      "test": {
        "description": "In this test the request parameter of the Authentication Request is taken, the payload decrypted and the value of the 'client_id' parameter correspond to the one that can be found in the EC of the RP",
        "name": "Does the RP Authentication Request's JWT contain the 'client_id' parameter identifying the RP",
        "operations": [
          {
            "action": "start",
            "session": "s1"
          },
          {
            "action": "intercept",
            "decode operations": [
              {
                "decode param": "request",
                "edits": [
                  {
                    "as": "client_id",
                    "jwt from": "payload",
                    "jwt save": "$.client_id"
                  }
                ],
                "from": "url",
                "type": "jwt"
              }
            ],
            "from session": "s1",
            "message type": "Authentication request",
            "then": "forward"
          },
          {
            "action": "intercept",
            "decode operations": [
              {
                "checks": [
                  {
                    "check": "$.metadata.openid_relying_party.client_id",
                    "contains": "client_id",
                    "in": "payload",
                    "use variable": "true"
                  }
                ],
                "decode param": "[\\s\\S]*",
                "from": "body",
                "type": "jwt"
              }
            ],
            "from session": "s1",
            "message type": "Entity Configuration response RP",
            "then": "forward"
          }
        ],
        "result": "correct flow s1",
        "sessions": [
          "s1"
        ],
        "type": "active"
      }
    },
    {
      "test": {
        "description": "The Authentication request is taken, the JWT Token in the request parameter base64url decoded and the value of the 'iss' parameter has to be the client_id of the RP. If it is another value or is missing, than the RP is not compliant with the specifications",
        "name": "Does the RP Authentication Request's JWT contain the 'iss' parameter set to the RP's client_id",
        "operations": [
          {
            "action": "start",
            "session": "s1"
          },
          {
            "action": "intercept",
            "decode operations": [
              {
                "decode param": "request",
                "edits": [
                  {
                    "as": "iss",
                    "jwt from": "payload",
                    "jwt save": "$.iss"
                  }
                ],
                "from": "url",
                "type": "jwt"
              }
            ],
            "from session": "s1",
            "message type": "Authentication request",
            "then": "forward"
          },
          {
            "action": "intercept",
            "decode operations": [
              {
                "checks": [
                  {
                    "check": "$.metadata.openid_relying_party.client_id",
                    "contains": "iss",
                    "in": "payload",
                    "use variable": "true"
                  }
                ],
                "decode param": "[\\s\\S]*",
                "from": "body",
                "type": "jwt"
              }
            ],
            "from session": "s1",
            "message type": "Entity Configuration response RP",
            "then": "forward"
          }
        ],
        "result": "correct flow s1",
        "sessions": [
          "s1"
        ],
        "type": "active"
      }
    },
    {
      "test": {
        "description": "The Authentication request is taken, the JWT Token in the request parameter base64url decoded and the value of the 'redirect_uri' parameter matches one of the URLs given in the RP metadata.",
        "name": "Does the RP Authentication Request's JWT contain the 'redirect_uri' parameter",
        "operations": [
          {
            "action": "start",
            "session": "s1"
          },
          {
            "action": "intercept",
            "decode operations": [
              {
                "decode param": "request",
                "edits": [
                  {
                    "as": "redirect_uris",
                    "jwt from": "payload",
                    "jwt save": "$.redirect_uri"
                  }
                ],
                "from": "url",
                "type": "jwt"
              }
            ],
            "from session": "s1",
            "message type": "Authentication request",
            "then": "forward"
          },
          {
            "action": "intercept",
            "decode operations": [
              {
                "checks": [
                  {
                    "check": "$.metadata.openid_relying_party.redirect_uris",
                    "contains": "redirect_uris",
                    "in": "payload",
                    "use variable": "true"
                  }
                ],
                "decode param": "[\\s\\S]*",
                "from": "body",
                "type": "jwt"
              }
            ],
            "from session": "s1",
            "message type": "Entity Configuration response RP",
            "then": "forward"
          }
        ],
        "result": "correct flow s1",
        "sessions": [
          "s1"
        ],
        "type": "active"
      }
    },
    {
      "test": {
        "description": "The Authentication request is taken, the JWT Token in the request parameter base64url decoded and the presence of the 'response_type' parameter is checked. This parameter's value must be the same of the 'response_types_supported' parameter in the OP metadata",
        "name": "Does the RP Authentication Request's JWT contain a correct 'response_type' parameter",
        "operations": [
          {
            "action": "start",
            "session": "s1"
          },
          {
            "action": "intercept",
            "decode operations": [
              {
                "decode param": "request",
                "edits": [
                  {
                    "as": "response_types_supported",
                    "jwt from": "payload",
                    "jwt save": "$.response_type"
                  }
                ],
                "from": "url",
                "type": "jwt"
              }
            ],
            "from session": "s1",
            "message type": "Authentication request",
            "then": "forward"
          },
          {
            "action": "intercept",
            "decode operations": [
              {
                "checks": [
                  {
                    "check": "$.metadata.openid_relying_party.response_types[0]",
                    "contains": "response_types_supported",
                    "in": "payload",
                    "use variable": "true"
                  }
                ],
                "decode param": "[\\s\\S]*",
                "from": "body",
                "type": "jwt"
              }
            ],
            "from session": "s1",
            "message type": "Entity Configuration response RP",
            "then": "forward"
          }
        ],
        "result": "correct flow s1",
        "sessions": [
          "s1"
        ],
        "type": "active"
      }
    }
  ]
}